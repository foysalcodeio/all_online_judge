only set bit as k-th bit - 1<<(n-1)
x<<y - multiplying - adding bit
x>>y = dividing - remove bit 

bit set - s | (1<<j)
bit check 1 is present or not - s & (1<<i)
bit clear - s & ~(1<<i)


using stl - string to binary
 - cout << bitset<8>(x) << endl;

int powerOfTwo(int x){
    return (x&&!(x&(x-1)));
}

//num to binary
cout<<bitset<const_length>(number);


for(int i=0; i<30; i++){
    if((x&(1<<i))!=0){
       cout << i << " ";
   }
 }
    //better way
 for(int i=0; (1<<i)<=x; i++){
      if(x&(1<<i)){
          cout << i << " ";
      }
  }
